#!/usr/bin/env perl

use strict;
use warnings;

use List::MoreUtils qw(any);
use Carp qw(confess);
use CPAN2git;
use Getopt::Long;

main_dispatch();

sub main_dispatch {
    my ( $command, %options ) = get_options();

    my %commands = (
        update_all_dists   => \&update_all_dists,
        update_single_dist => \&update_single_dist,
    );

    ( any { $_ eq $command } keys(%commands) )
      or confess("Unknown command $command");

    $commands{$command}->(%options);

    return;
}

sub get_options {
    my ( $command, %options );
    my ( $all, $cpan_dir, $repos_dir, $dist_name );
    my $result = GetOptions(
        "all"         => \$all,
        "cpan-dir=s"  => \$cpan_dir,
        "repos-dir=s" => \$repos_dir,
        "dist-name=s" => \$dist_name
    );

    $result or confess("Invalid arguments: ");

    my @parse_spec = ( {
            var_ref => \$all,
            command => 'update_all_dists',
        },
        {
            var_ref  => \$cpan_dir,
            option   => 'cpan_dir',
            required => 1,
        },
        {
            var_ref  => \$repos_dir,
            option   => 'repos_dir',
            required => 1,
        },
        {
            var_ref => \$dist_name,
            command => 'update_dist',
            option  => 'dist_name',
        },
    );

    for my $spec ( grep { $_->{command} } @parse_spec ) {
        next if not ${ $spec->{var_ref} };
        $command and confess("Invalid arguments: can't do both $command and $spec->{command}");
        $command = $spec->{command};
    }
    $command or confess("Invalid arguments: no command provided");

    for my $spec ( grep { $_->{option} } @parse_spec ) {
        if ( not defined( ${ $spec->{var_ref} } ) ) {
            $spec->{required} and confess("Required option $spec->{option} not provided");
            next;
        }
        $options{ $spec->{option} } = ${ $spec->{var_ref} };
    }

    return ( $command, %options );
}

sub update_all_dists {
    my (%options) = @_;

    my $cpan2git = CPAN2git->new(
        cpan_dir  => $options{cpan_dir},
        repos_dir => $options{repos_dir},
    );
    $cpan2git->update_all();

    return;
}

sub update_single_dist {
    my (%options) = @_;

    my $cpan2git = CPAN2git->new(
        cpan_dir  => $options{cpan_dir},
        repos_dir => $options{repos_dir},
    );
    $cpan2git->update_dist( $options{dist_name} );

    return;
}

1;
