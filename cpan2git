#!/usr/bin/env perl

use strict;
use warnings;

use lib 'lib';

=head1 NAME

cpan2git - program to convert local cpan mirror to git repositories

=head1 SYNOPSIS
   
$ cpan2git --all --cpan-dir=/var/lib/cpan2git/cpan-mirror --repos-dir=/var/lib/cpan2git/repositories

=head1 DESCRIPTION

cpan2git is a script which allows you to convert perl modules (aka
distributions) from cpan/backpan to git repositories. cpan2git
converts a cpan/backpan mirror to a directory with a git repository
for each cpan module.

Each version of a module is tagged with the string
"<module-name>-<version-number>".

cpan2git also works incrementally. If a new version of cpan module is
available, cpan2git will update the corresponding git repository.

=cut

use List::MoreUtils qw(any);
use Carp qw(confess);
use CPAN2git;
use Scriptalicious;

fix_is_space_loading();

main_dispatch();

sub main_dispatch {
    my ( $command, %options ) = get_options();

    my %commands = (
        update_all_dists   => \&update_all_dists,
        update_single_dist => \&update_single_dist,
    );

    ( any { $_ eq $command } keys(%commands) )
      or confess_usage("Unknown command $command");

    $commands{$command}->(%options);

    return;
}

sub get_options {
    my ( $command, %options );
    my ( $all, $cpan_dir, $repos_dir, $dist_name, $skip_untill_dist );
    getopt(
        "all"         => \$all,
        "cpan-dir=s"  => \$cpan_dir,
        "repos-dir=s" => \$repos_dir,
        "skip-untill-dist" => \$skip_untill_dist,
        "dist-name=s@" => \$dist_name
    );

    my @parse_spec = ( {
            var_ref => \$all,
            command => 'update_all_dists',
        },
        {
            var_ref => \$dist_name,
            command => 'update_single_dist',
            option  => 'dist_name',
        },
        {
            var_ref  => \$cpan_dir,
            option   => 'cpan_dir',
            required => 1,
        },
        {
            var_ref  => \$repos_dir,
            option   => 'repos_dir',
            required => 1,
        },
        {
            var_ref  => \$skip_untill_dist,
            option   => 'skip_untill_dist',
        },
    );

    for my $spec ( grep { $_->{command} } @parse_spec ) {
        next if not ${ $spec->{var_ref} };
        if( $command ) {
            confess_usage("Invalid arguments: can't do both $command and $spec->{command}");
        }
        $command = $spec->{command};
    }
    if( not $command ) {
        confess_usage("Invalid arguments: no command provided");
    }

    for my $spec ( grep { $_->{option} } @parse_spec ) {
        if ( not defined( ${ $spec->{var_ref} } ) ) {
            if( $spec->{required} ) {
                confess_usage("Required option $spec->{option} not provided");
            }
            next;
        }
        $options{ $spec->{option} } = ${ $spec->{var_ref} };
    }

    return ( $command, %options );
}

sub update_all_dists {
    my (%options) = @_;

    my $cpan2git = CPAN2git->new(
        cpan_dir  => $options{cpan_dir},
        repos_dir => $options{repos_dir},
    );
    $cpan2git->update_all( skip_untill_dist => $options{skip_untill_dist} );

    return;
}

sub update_single_dist {
    my (%options) = @_;

    my $cpan2git = CPAN2git->new(
        cpan_dir  => $options{cpan_dir},
        repos_dir => $options{repos_dir},
    );
    for my $dist_name ( @{ $options{dist_name} } ) {
        $cpan2git->update_dist( $dist_name );
    }

    return;
}

sub confess_usage {
    my (@confess_args) = @_;

    print_usage();
    confess(@confess_args);

    return;
}

sub print_usage {
    print STDERR <<"EOU";
usage: cperl2git <option list> <command [arguments]>
    Where <command> is one of:
        --all (convert all CPAN distributions to git repositories)
        --dist-name=<CPAN distribution name> (convert a single distribution)
    Where <option list> consists of:
        --cpan-dir=<dir> (required, location of local cpan mirror)
        --repos-dir=<dir> (required, location of git repositories)
EOU

    return;
}

sub fix_is_space_loading {
    # make sure IsSpace is loaded for '\s' to prevent problems with
    # failing to load it when XML::SAX encounters UTF-8.
    "x{300}" =~ m/\s/;
}

1;
