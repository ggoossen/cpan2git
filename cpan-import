#/usr/bin/perl -w

use strict;
use warnings;

use Scriptalicious;

use File::Find;
use YAML ();
use Cwd;
use DateTime;
use CPAN::DistnameInfo;

my $opt_package;
my $force_import;
my $force_git_push;
my $no_ignore_errors;
getopt("package=s", \$opt_package,
       "force_import", \$force_import,
       "force_git_push", \$force_git_push,
       "no_ignore_errors", \$no_ignore_errors,
      );

my @files;

find( sub { m/^(.*)[.]tar[.]gz$/ and push @files, [$_, $File::Find::dir, $1]; }, "cpan/authors/" );

my $curdir = cwd;

my %packages;

my @invalid_files = qw|XML-Clean-1.010101 perl-Tk-800.023-bin-0-arm-linux GD-3DBarGrapher-0.9.2
                       perl-cross-arm-5.8.0 Crypt-Serpent-0.01 5.003_07-2.U AFS-Monitor-0.3.1
                       AI-NeuralNet-SOM-0.01 AI-NeuralNet-SOM-0.02
                       AlarmCall-1.1 Allegro-0.02_0-ppm-MSWin32-x86-multi-thread-5.6
                       Allegro-0.02_0-ppm-MSWin32-x86-multi-thread-5.8 Apache-AuthCookiePAM-1.01
                       App-GUI-Notepad-0.04 App-REPL-0.01
DBI-1.45-5.8.4
                       |;

my @invalid_files_unknown = qw|
Attribute-Unimplemented-0.01
Audio-Wav-0.03
BMERC-utils
Bundle-Act-0.01
Business-DE-Konto-0.1
ByClock-0.90
CECALA
CGI-FormBuilder-1.54
CGI-Session-4.04
CGISession
CORBA-IDLtree-0.7
CallerItem-1.0
Catalyst-Controller-FormBuilder-0.01_01
Catalyst-Plugin-Imager-0.01
Chart-HeatMap-Simple-0.01
Chitresh_ncbi
Class-Date-1.0.5.x86

Class-Listener-0.01.06
Class-PObject-2.08
Class_Generate-1.00
Comm.pl-1.8
Config-Directory-0.03
CtCmd_1.06
Curses-Devkit-4.9.1
Cvs-0.04
DBD-DB2-0.78-5.8.4
DBD-MaxDB-7.5.00.31a
DBD-Multiplex-1.7
DBD-mysql-1.2212.x86
DBD-test-0.02
DJabberd-Authen-DBIC-0.1
DOOP_API_0.01
DWH_File.0.01
Data-Define-1.01
Data-Describe-1.00
Data-Iter-0.01.08
Data-SExpression-0.31
DateManip-5.46
Db-DFC-0.1
Devel-Tinderclient-1.2
DumpStack-1.1
EPS-2.00
Easy-WML-0.1
EthiopicUnicode-0.01
EventServer-2.3
FFI
FServer
Fax-DataFax-DateTime-0.01
File-ReadSimple.1.0
FileKGlob
Finance-Bank-CreateCard-1.0.1
Font-GlyphNames-0.01
FoxPro-DBF-0.16
FrameMaker-FromHTML-0.02
Games-Go-SGF-0.03
Graphics-EPS-3.00
HTML-EP-MSWin32
HTML-Entities-Latin2.pm-0.01
HTTP-Browscap-0.01
Harvey-1.02.1
IMAPGet-0.1
IO-Extended-0.09
InitializeServer-1.0
Kwiki-Theme-YAPCChicago-0.10
LWP-UserAgent-ProxyAny-1.02
LineByLine-1.0
LoadHtml.5_0
LoadWorm-0.10
Locale-Hebrew-0.01
Log-WithCallbacks-1.00
MIDI-Realtime-0.01
MPE-IMAGE-0.04
Mac-Serial_v1.006
MailArch-1.9
MasonX-StaticBuilder-0.01
Math-Phi-0.01
Math-Vector-1.03
NCBI
Net-LiveJournal-0.26
Net-Radius-1.47
Net-SCP-Expect-0.01
NetIcecast-1.00
Nullify-0.0.1
Object-Interface-1.0
OpenCA-DBI-0.4.3a
PAR-0.953
PDF-CreateSimple-1-1
PDF-Xtract-0.02
PGForth1.1
PHP-MySQL-Session
Palm-Keyring-0.93
Parallel-Pvm-1.4.0.ebuild
ParseLex-3.0
PerlMol-0.26_00.ppm
PerlQt-2.000_05
Physics-Psychrometry-1.0
PlugIn-0.01
PodParser-1.02
Portage-Conf-Packages-1.0
Prolog-alpha
Regexp-Box-0.01
Regexp-Tr-0.06
SF_form_secure_v2.1
SMS_API_2_01
SQL-Generator-0.02.05
SQL-Translator-Producer-DBIx-Class-File-Simple-0.1
SVK-v2.0.0_91
Scalar-Convert-0.01
Scripts-TXTCOD-4.7.1-eng
Set-Object-Queryable-0.01
SiePerl-5.6.1-bin-1.1-Solaris2.6.INSTALL
StateMachine-Abstract-0.01.06
Statistics-ChiSquare-0.3
StatisticsDescriptive-1.1
StatisticsRegression
Stem-0.1
Test-File-Contents-0.04
Test-JavaScript-0.01
Test-Mail-0.04
ThousandWords_0.05
Tie-RDBM-Cached-0.03
Tie-TieConstant-1.01
Tie-Tools-1.04
Tree-Registry-0.01_01
Twofish-1.0
Typhoon-Web-DataBase-Administrator-1.2.2
UDPmsg-0.10
UNIVERSAL-1.0

Unicode-CheckUTF8-1.00
Unicode-Decompose-0.01
VelocisSQL-1.3
WWW-Hotmail-0.07
WWW-Mechanize-Plugin-Display-0.9901
WWW-Monitor-0.1
WWW-Search-AlltheWeb-1.4+
WWW-Search-EuroSeek-1.2+
WWW-Search-Excite-News-2.03+
WWW-Search-NCBI-PubMed-0.01
WWW-Search-PRWire-1.0
WWW-Search-ZDNet-2.02+
WebService-Geograph-API-0.01
Webservice-eBay-1.2_devel
Win32-API-Prototype
Win32-EventLog-Message
Win32-Exchange_v0.045
Win32-Pipe_v20010208
Win32-Scheduler_v20000702
Win32API-Resources-0.06
Winamp-Control
X3D-0.00.1
XML-Elemental-1.02
XPathToXML-0.01
XprioriXMS-0.01
apache.authnetldap.015
apache.authznetldap.01
asm2htm-1.3
authen-rbac-0.1
bbsim.pl-0.1
betsie-1.5.11
bioperl-ext-0.6
checkservers-0.9
compatlib-1.0
cvs_init_1_01_
dbgui_166
dbgui_216b
dbgui_217b
dbgui_217d
dbgui_217e
dbgui_217f
dbgui_217g
dbgui_217h
dbgui_218c
dbgui_dblib_168
debian-build-1.01
dhIndex-1.3
divclus_2.2
dotReader-
echo-1.0
evalign.1.5
fairsplit_10
fetch.1.2
ftp_eg
gif-info-1.1
gutparse-0.1
i2c-0.1
iPerl-0.6
jeffrey.perl
jp_beta_1
libparse-0.71
log
mc_units-5.004_70-01
metaconfig-for-Perl-5.6.0
mirror_1.0
mydb_10
ngb-101
ngstatistics1.1
p5-Palm-1.004
p9p0.11
paste-1.0
perl-5.005-minimal-bin-0-arm-linux
perl-54-info
perl-bison-1.25.1.00
perl-cross-5.8.2-3
perl-module-manage-kit-1.0.0
perl-tutorial_1.0
perl-tutorial-DE_2.01
perlMIF.beta2
perl_archie.1.5
perlanim0.1
perlbook-5.005_02-a
perldochtml-5.6.1-0
perlpalmdoc-doc-5.7.0@8003
perlpalmdoc-doc-500503-1
perlpalmdoc-teal-5.7.0@8003
perlpalmdoc-teal-500503-1
perltk-800.022_5.005-sol7-sparc-local
pod2ps-1.0.1
pptkspell_1.0
printenv-1.0
procmgr_120
psbind-20030101
ptkbl_1.0
ptkref-800.005.2
rgetlinks-0.01
router-lg-0.98a
sc_rate_1.2
self_self_search.1.3
sleep-1.0
sqlperl.4.8
subclustv1_0
swig1.1p4
tbl2html-v1.1
term-prompt-0.05
tidyview-1.04
turnover_170
vhscript-0.5
web-1.29
woda-uk-3-402-pm
xxx2lout-1.35
ymdecode-0.1
zfilter27
|;

for (@files) {
    my ($filename, $dir, $basename) = @$_;
    next if grep { $_ eq $basename } @invalid_files;
    next if grep { $_ eq $basename } @invalid_files_unknown;

    if ($opt_package) {
        next unless $basename =~ m/^\Q$opt_package\E/;
    }

    $dir =~ m#([^/]*)$# or die;
    my $author = $1;
    my $mtime = (stat("$dir/$filename"))[9];

    my $dni = CPAN::DistnameInfo->new("$dir/$filename");
    my $name = $dni->dist;
    my $version = $dni->version;
    my $distvname = $dni->distvname;

    push @{$packages{$name} ||= [] }, { version => $version,
                                        name => $name,
                                        distvname => $distvname,
                                        dir => $dir,
                                        basename => $basename,
                                        mtime => $mtime,
                                        author => $author,
                                      };
}

my @package_names = sort keys %packages;

$opt_package and @package_names = ($opt_package);

my @failed_modules;
for my $pack_name (@package_names) {
    my $pack = $packages{$pack_name} or barf "'$pack_name' does not exist";
    my $prev_version = undef;
    for my $module (sort { $a->{'mtime'} <=> $b->{'mtime'} } @$pack) {
        mutter "package: '$module->{distvname}'";
        chdir $curdir or die $!;
        if (-e "tmp") {
            run("chmod -R +rwx tmp");
            run("rm -rf tmp");
        }

        eval {
            git_import($module, $prev_version);
            $prev_version = $module->{distvname};
        };
        if ($@) {
            warn;
            push @failed_modules, $module->{distvname};
            $no_ignore_errors and die "Failed importing '$module->{distvname}'";
            last; # next package
        }
    }
}
say "Failed modules:\n" . (join "\n", @failed_modules) if @failed_modules;


sub extract {
    my ($dir, $basename, $prev_version) = @_;

    die if $basename =~ m/Win32-Filnames-0.01/;

    my $ext = (-e "$dir/$basename.tar.gz") ? "tar.gz"
      : (-e "$dir/$basename.tgz") ? "tgz"
      : (-e "$dir/$basename.zip") ? "zip"
      : '';

    if (not $ext) {
        die "archive not found $dir/$basename. cwd:" . cwd;
    }

    mkdir "tmp" or die $!;
    chdir "tmp" or die $!;
    if ($ext eq "zip") {
        run("unzip", "-q", "$curdir/$dir/$basename.$ext");
    } else {
        run("tar", "-xz", "-f", "$curdir/$dir/$basename.$ext");
    }
    chdir $curdir or die $!;
}

sub git_import {
    my ($module, $prev_version) = @_;

    my $dir = $module->{dir};
    my $basename = $module->{basename};
    my $name = $module->{name} or die "No name";
    my $distvname = $module->{distvname};
    my $mtime = DateTime->from_epoch( epoch => $module->{mtime} );
    defined $distvname or die "No distvname";

    run("mkdir -p cpan-repos/$module->{name}");
    chdir ("cpan-repos/$module->{name}") or die;

    if (not -e ".git") {
        run("git init-db");
    }
    if (not $force_import and not run_err("git tag -l ^" . quotemeta("$distvname") . '$')) {
        mutter "Module '$distvname' already imported";
        return;
    }

    # setup remote
    run_err("git-remote", "add", "origin", "ssh://kurila\@dev.tty.nl/home/kurila/git-repos/cpan/$name/");
    if ( run_err("git-remote", "show", "origin") ) {
        run(qq|ssh kurila\@dev.tty.nl 'mkdir "git-repos/cpan/$module->{name}" ;|
            . qq|cd "git-repos/cpan/$module->{name}" ; git-init-db '|);
        run_err("git-remote", "show", "origin") and barf "Failed setting up remote for '$module->{name}'";
    }


    # reset to previous version or start from start from scatch.
    run_err("rm .git/refs/heads/master"); # and die;
    if (defined $prev_version) {
        run("git reset --hard $prev_version");
    }

    chdir($curdir) or die;
    extract($dir, $basename, $prev_version);
    chdir("cpan-repos/$module->{name}/") or die;

    # update-index to extracted files.
    run("chmod +rwx * ; rm -rf *");
    run("find $curdir/tmp/ -type d -exec chmod u+rx {} \\;"); # directories without access permissions ?!
    (my $slashedname = $name) =~ s#-#/#g;
    my ($srcdir) = grep { -d $_ } map { "$curdir/tmp/$_/" } ("$basename", "$name", "$slashedname");
    if (! $srcdir) {
        for my $try (glob("$curdir/tmp/$name*/"), glob("$curdir/tmp/*/"), "$curdir/tmp/") {
            if (grep { -e "$try/$_" } qw|MANIFEST Makefile.PL makefile.pl|) {
                $srcdir = $try;
                last;
            }
        }
    }
    $srcdir or barf "Source of '$basename' not extracted?!";
    run("find $srcdir -type d -empty -delete"); # remove empty directories, because git doesn't like them ?!
    run("mv $srcdir/* ./");
    run("git-add *");

    # make commit and tag.
    my $forceflag = $force_git_push ? "-f" : "";
    $ENV{GIT_AUTHOR_DATE} = $ENV{GIT_COMMITTER_DATE} = $mtime->datetime;
    $ENV{GIT_AUTHOR_NAME} = $ENV{GIT_COMMITTER_NAME} = "$module->{author}";
    $ENV{GIT_AUTHOR_EMAIL} = $ENV{GIT_COMMITTER_EMAIL} = "$module->{author}\@cpan.org";
    unless (run_err("git-status") == 256) { # status is 256 when nothing hash changed.
        run("git commit -a -m '$distvname'");
    }
    run("git tag $forceflag -m '$distvname' -a '$distvname' ");
    run("git-gc --prune");
    run("git push $forceflag --tags");
    run("git push $forceflag origin HEAD:refs/heads/master");

    chdir($curdir) or die;
}

